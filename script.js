// --- Global Constants for Roulette Definitions ---
const WHEEL_BASED_GROUPS = {
    voisins: { name: "Voisins (Neighbours of Zero)", numbers: [22, 18, 29, 7, 28, 19, 4, 21, 2, 25] },
    tiers: { name: "Tiers du Cylindre", numbers: [27, 13, 36, 11, 30, 8, 23, 10, 5, 24, 16, 33] },
    orphelins: { name: "Orphelins", numbers: [17, 34, 6, 1, 20, 14, 31, 9] },
    zeroSpiel: { name: "Zero Spiel", numbers: [12, 35, 3, 26, 0, 32, 15] }
};

const TABLE_BASED_GROUPS = {
    dozens: {
        name: "Dozens",
        firstDozen: { name: "1st Dozen", numbers: Array.from({length: 12}, (_, i) => i + 1) },
        secondDozen: { name: "2nd Dozen", numbers: Array.from({length: 12}, (_, i) => i + 13) },
        thirdDozen: { name: "3rd Dozen", numbers: Array.from({length: 12}, (_, i) => i + 25) }
    },
    columns: {
        name: "Columns",
        firstColumn: { name: "Column 1", numbers: [1, 4, 7, 10, 13, 16, 19, 22, 25, 28, 31, 34] },
        secondColumn: { name: "Column 2", numbers: [2, 5, 8, 11, 14, 17, 20, 23, 26, 29, 32, 35] },
        thirdColumn: { name: "Column 3", numbers: [3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36] }
    },
    rows: { name: "Rows (Horizontal)" },
    diagonals: {
        name: "Diagonals",
        diag1_5_9: { name: "Diagonal 1-5-9", numbers: [1,5,9] },
        diag3_5_7: { name: "Diagonal 3-5-7", numbers: [3,5,7] },
        diag2_6_10: { name: "Diagonal 2-6-10", numbers: [2,6,10] }
    },
    quadrants: {
        name: "Quadrants (Table Zones)",
        q1: { name: "Quadrant 1 (1-9)", numbers: Array.from({length: 9}, (_, i) => i + 1) },
        q2: { name: "Quadrant 2 (10-18)", numbers: Array.from({length: 9}, (_, i) => i + 10) },
        q3: { name: "Quadrant 3 (19-27)", numbers: Array.from({length: 9}, (_, i) => i + 19) },
        q4: { name: "Quadrant 4 (28-36)", numbers: Array.from({length: 9}, (_, i) => i + 28) }
    }
};
for (let i = 0; i < 12; i++) { const startNum = i * 3 + 1; TABLE_BASED_GROUPS.rows[`row${startNum}_${startNum+1}_${startNum+2}`] = { name: `Row ${startNum}-${startNum+1}-${startNum+2}`, numbers: [startNum, startNum + 1, startNum + 2] }; }

const RACETRACK_BET_TYPES = { finalesEnPlein: { name: "Finales en Plein" }, finalesACheval: { name: "Finales Ã  Cheval" }};
for (let i = 0; i <= 9; i++) { const numbers = []; for (let j = 0; j <= 36; j++) { if (j % 10 === i) { numbers.push(j); } } RACETRACK_BET_TYPES.finalesEnPlein[`finale${i}`] = { name: `Finale ${i}`, numbers: numbers };}
const finalChevalPairs = [[0,1], [1,2], [2,3], [3,4], [4,5], [5,6]];
finalChevalPairs.forEach(pair => { const numbers = []; for (let j = 0; j <= 36; j++) { if (j % 10 === pair[0] || j % 10 === pair[1]) { numbers.push(j); } } RACETRACK_BET_TYPES.finalesACheval[`finale${pair[0]}_${pair[1]}`] = { name: `Finale ${pair[0]}/${pair[1]}`, numbers: numbers.sort((a,b) => a-b) };});

const BASIC_TRENDS_DEFINITIONS = { redNumbers: { name: "Red", numbers: [1, 3, 5, 7, 9, 12, 14, 16, 18, 19, 21, 23, 25, 27, 30, 32, 34, 36] }, blackNumbers: { name: "Black", numbers: [2, 4, 6, 8, 10, 11, 13, 15, 17, 20, 22, 24, 26, 28, 29, 31, 33, 35] }, evenNumbers: { name: "Even", numbers: Array.from({length: 18}, (_, i) => (i + 1) * 2) }, oddNumbers: { name: "Odd", numbers: Array.from({length: 18}, (_, i) => i * 2 + 1) }, lowNumbers: { name: "Low (1-18)", numbers: Array.from({length: 18}, (_, i) => i + 1) }, highNumbers: { name: "High (19-36)", numbers: Array.from({length: 18}, (_, i) => i + 19) }};
const EURO_WHEEL_ORDER = [0, 32, 15, 19, 4, 21, 2, 25, 17, 34, 6, 27, 13, 36, 11, 30, 8, 23, 10, 5, 24, 16, 33, 1, 20, 14, 31, 9, 22, 18, 29, 7, 28, 12, 35, 3, 26];
const WHEEL_SEGMENTS = { segment1: { name: `Wheel Segment 1 (${EURO_WHEEL_ORDER.slice(0,3).join(',')}...${EURO_WHEEL_ORDER.slice(9,12).join(',')})`, numbers: EURO_WHEEL_ORDER.slice(0, 12) }, segment2: { name: `Wheel Segment 2 (${EURO_WHEEL_ORDER.slice(12,15).join(',')}...${EURO_WHEEL_ORDER.slice(21,24).join(',')})`, numbers: EURO_WHEEL_ORDER.slice(12, 24) }, segment3: { name: `Wheel Segment 3 (${EURO_WHEEL_ORDER.slice(24,27).join(',')}...${EURO_WHEEL_ORDER.slice(34,37).join(',')})`, numbers: EURO_WHEEL_ORDER.slice(24, 37) }};
const EXPECTED_SEGMENT_PERCENTAGES = { [WHEEL_SEGMENTS.segment1.name]: (WHEEL_SEGMENTS.segment1.numbers.length / 37) * 100, [WHEEL_SEGMENTS.segment2.name]: (WHEEL_SEGMENTS.segment2.numbers.length / 37) * 100, [WHEEL_SEGMENTS.segment3.name]: (WHEEL_SEGMENTS.segment3.numbers.length / 37) * 100,};

document.addEventListener('DOMContentLoaded', () => {
    // DOM Element references
    const resultInput = document.getElementById('result-input');
    const submitButton = document.getElementById('submit-result');
    const resetButton = document.getElementById('reset-results');
    const resultsList = document.getElementById('results-list');
    const filterSelect = document.getElementById('filter-select');
    const numberFrequencyDiv = document.getElementById('number-frequency');
    const groupAnalysisDiv = document.getElementById('group-analysis');
    const analysisOutputDiv = document.getElementById('analysis-output');
    const mainElement = document.querySelector('main');
    const customGroupNameInput = document.getElementById('custom-group-name');
    const customGroupNumbersInput = document.getElementById('custom-group-numbers');
    const saveCustomGroupButton = document.getElementById('save-custom-group');
    const customGroupsListUl = document.getElementById('custom-groups-list');
    const neighbourCenterNumberInput = document.getElementById('neighbour-center-number');
    const neighbourCountInput = document.getElementById('neighbour-count');
    const analyzeNeighbourBetButton = document.getElementById('analyze-neighbour-bet');
    const neighbourBetAnalysisResultDiv = document.getElementById('neighbour-bet-analysis-result');
    const currentDealerIdInput = document.getElementById('current-dealer-id');
    const setDealerIdButton = document.getElementById('set-dealer-id');
    const activeDealerDisplay = document.getElementById('active-dealer-display');
    const filterByDealerCheckbox = document.getElementById('filter-by-dealer-checkbox');
    const activeDealerFilterDisplay = document.getElementById('active-dealer-filter-display');

    // Data stores
    let results = [];
    let customGroups = [];
    let currentDealerId = 'Default';
    let currentHotNumbers = [];

    // Storage Keys
    const RESULTS_STORAGE_KEY = 'rouletteResults';
    const CUSTOM_GROUPS_STORAGE_KEY = 'rouletteCustomGroups';
    const DEALER_ID_STORAGE_KEY = 'rouletteCurrentDealerId';
    const SESSION_START_TIME_KEY = 'rouletteSessionStartTime';
    let sessionStartTime = Date.now();
    let sessionIntervalId = null;

    // Bias Analysis Constants
    const EXPECTED_SECTOR_PERCENTAGES_BIAS = {};
    for(const key in WHEEL_BASED_GROUPS) { EXPECTED_SECTOR_PERCENTAGES_BIAS[WHEEL_BASED_GROUPS[key].name] = (WHEEL_BASED_GROUPS[key].numbers.length / 37) * 100; }
    const HOT_THRESHOLD_MULTIPLIER = 1.5;
    const COLD_THRESHOLD_MULTIPLIER = 0.5;
    const MIN_HITS_FOR_HOT = 5;
    const MIN_TOTAL_SPINS_FOR_COLD = 20;

    // --- Helper Functions ---
    const countHitsInGroup = (groupNumbers, dataToAnalyze) => dataToAnalyze.filter(item => groupNumbers.includes(item.number)).length;
    const appendAnalysisToDivGeneric = (groupName, groupNumbers, dataToAnalyze, targetDiv, biasIndicator = "", biasType = "") => { const count = countHitsInGroup(groupNumbers, dataToAnalyze); const p = document.createElement('p'); let percentage = 0; if (dataToAnalyze.length > 0) { percentage = (count / dataToAnalyze.length) * 100; } p.textContent = `${groupName}: ${count} hit(s) (${percentage.toFixed(2)}%) ${biasIndicator}`; if (biasType === "Hot") { p.style.backgroundColor = 'rgba(255, 0, 0, 0.15)'; } else if (biasType === "Cold") { p.style.backgroundColor = 'rgba(0, 0, 255, 0.1)'; } else if (biasType === "Average") { p.style.backgroundColor = 'rgba(211, 211, 211, 0.3)'; } targetDiv.appendChild(p); };
    const getWheelSector = (number) => { for (const key in WHEEL_BASED_GROUPS) { if (WHEEL_BASED_GROUPS[key].numbers.includes(number)) { return WHEEL_BASED_GROUPS[key].name; } } return null; };
    const getNumberColor = (number) => { if (number === 0) { return 'Green'; } if (BASIC_TRENDS_DEFINITIONS.redNumbers.numbers.includes(number)) { return 'Red'; } if (BASIC_TRENDS_DEFINITIONS.blackNumbers.numbers.includes(number)) { return 'Black'; } return null; };
    const getDigitSum = (number) => { if (number < 0) return -1; let sum = number; while (sum >= 10) { sum = String(sum).split('').reduce((acc, digit) => acc + parseInt(digit, 10), 0); } return sum; };
    const formatDuration = (ms) => { if (ms < 0) ms = 0; const totalSeconds = Math.floor(ms / 1000); const hours = Math.floor(totalSeconds / 3600); const minutes = Math.floor((totalSeconds % 3600) / 60); const seconds = totalSeconds % 60; return `${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`; };

    // --- Session Tracker Functions ---
    const loadSessionStartTime = () => { const storedTime = localStorage.getItem(SESSION_START_TIME_KEY); if (storedTime) { sessionStartTime = parseInt(storedTime, 10); } else { sessionStartTime = Date.now(); localStorage.setItem(SESSION_START_TIME_KEY, sessionStartTime.toString()); }};
    const resetSession = () => { sessionStartTime = Date.now(); localStorage.setItem(SESSION_START_TIME_KEY, sessionStartTime.toString());};
    const updateSessionTrackerDisplay = () => { let sessionTrackerPanel = document.getElementById('session-tracker-panel'); if (!sessionTrackerPanel) { sessionTrackerPanel = document.createElement('div'); sessionTrackerPanel.id = 'session-tracker-panel'; sessionTrackerPanel.style.cssText = 'padding: 10px; background-color: #f9f9f9; border: 1px solid #eee; margin: 10px 0;'; const alertPanel = document.getElementById('alert-panel'); if (alertPanel && alertPanel.parentNode) { alertPanel.parentNode.insertBefore(sessionTrackerPanel, alertPanel.nextSibling); } else if (mainElement && mainElement.firstChild) { mainElement.insertBefore(sessionTrackerPanel, mainElement.firstChild); } else if (mainElement) { mainElement.appendChild(sessionTrackerPanel); } else { document.body.insertBefore(sessionTrackerPanel, document.body.firstChild); }} const startTimeFormatted = new Date(sessionStartTime).toLocaleString(); const currentDuration = Date.now() - sessionStartTime; const durationFormatted = formatDuration(currentDuration); const spinCount = results.length; sessionTrackerPanel.innerHTML = `<h4>Session Information</h4><p><strong>Session Started:</strong> ${startTimeFormatted}</p><p><strong>Total Spins This Session:</strong> ${spinCount}</p><p id="session-duration-display"><strong>Session Duration:</strong> ${durationFormatted}</p>`;};
    const updateLiveDuration = () => { const durationDisplay = document.getElementById('session-duration-display'); if (durationDisplay) { const currentDuration = Date.now() - sessionStartTime; durationDisplay.textContent = `Session Duration: ${formatDuration(currentDuration)}`; }};

    // --- Dealer ID Management ---
    const updateActiveDealerFilterDisplay = () => { activeDealerFilterDisplay.textContent = filterByDealerCheckbox.checked ? currentDealerId : "N/A - Showing All"; };
    const loadCurrentDealerId = () => { const storedDealerId = localStorage.getItem(DEALER_ID_STORAGE_KEY); if (storedDealerId) { currentDealerId = storedDealerId; } else { currentDealerId = 'Default'; } currentDealerIdInput.value = currentDealerId; activeDealerDisplay.textContent = currentDealerId; updateActiveDealerFilterDisplay(); };
    const saveCurrentDealerId = () => { localStorage.setItem(DEALER_ID_STORAGE_KEY, currentDealerId); };
    setDealerIdButton.addEventListener('click', () => { const newDealerId = currentDealerIdInput.value.trim(); if (newDealerId) { currentDealerId = newDealerId; activeDealerDisplay.textContent = currentDealerId; updateActiveDealerFilterDisplay(); saveCurrentDealerId(); alert(`Dealer ID set to: ${currentDealerId}. Analysis will update.`); renderResults(); } else { alert('Dealer ID cannot be empty.'); }});

    // --- Results Data Structure & Management ---
    const loadResults = () => { const storedResults = localStorage.getItem(RESULTS_STORAGE_KEY); if (storedResults) { try { const parsedResults = JSON.parse(storedResults); if (Array.isArray(parsedResults) && (parsedResults.length === 0 || (typeof parsedResults[0] === 'object' && parsedResults[0] !== null && 'number' in parsedResults[0]))) { results = parsedResults; } else { results = []; } } catch (e) { results = []; } } };
    const saveResults = () => { localStorage.setItem(RESULTS_STORAGE_KEY, JSON.stringify(results)); };
    const renderResultsListDisplay = () => { resultsList.innerHTML = ''; const filterValue = filterSelect.value; let resultsToDisplayObjects = results; if (filterValue !== 'all') { const count = parseInt(filterValue, 10); const actualCount = Math.min(count, resultsToDisplayObjects.length); resultsToDisplayObjects = resultsToDisplayObjects.slice(-actualCount); } resultsToDisplayObjects.forEach(resultObj => { const listItem = document.createElement('li'); listItem.textContent = `${resultObj.number} (D: ${resultObj.dealerId || 'N/A'})`; resultsList.appendChild(listItem); }); };
    submitButton.addEventListener('click', () => { const inputValue = resultInput.value.trim(); if (inputValue === '') { alert('Please enter a number.'); return; } const number = parseInt(inputValue, 10); if (isNaN(number) || number < 0 || number > 36) { alert('Invalid input (0-36).'); resultInput.value = ''; return; } results.push({ number: number, dealerId: currentDealerId, timestamp: Date.now() }); saveResults(); renderResults(); resultInput.value = ''; });
    resetButton.addEventListener('click', () => { if (confirm('Are you sure you want to reset all results and start a new session?')) { results = []; saveResults(); resetSession(); renderResults(); }});

    // --- Analysis Function Definitions ---
    const renderFrequencyAnalysis = (dataToAnalyze) => { const numFrequencyDiv = document.getElementById('number-frequency'); let titleSuffix = filterByDealerCheckbox.checked ? ` (Dealer: ${currentDealerId})` : ' (All Results)'; if (!numFrequencyDiv) { console.error("number-frequency div not found"); return; } numFrequencyDiv.innerHTML = `<h3>Number Frequency${titleSuffix}</h3>`; if (dataToAnalyze.length === 0) { numFrequencyDiv.innerHTML += '<p>No results to analyze in current view.</p>'; return; } const counts = {}; for (let k = 0; k <= 36; k++) { counts[k] = 0; } dataToAnalyze.forEach(item => { counts[item.number]++; }); const totalResultsToAnalyze = dataToAnalyze.length; numFrequencyDiv.innerHTML += `<p>Total Results in View: ${totalResultsToAnalyze}</p>`; let maxFreq = 0; for (let i = 0; i <= 36; i++) { if (counts[i] > maxFreq) { maxFreq = counts[i]; }} const MAX_BAR_WIDTH_PX = 150; for (let i = 0; i <= 36; i++) { const percentage = totalResultsToAnalyze > 0 ? (counts[i] / totalResultsToAnalyze) * 100 : 0; const statP = document.createElement('p'); statP.style.display = 'flex'; statP.style.alignItems = 'center'; statP.style.marginBottom = '3px'; const textSpan = document.createElement('span'); textSpan.textContent = `Number ${i}: ${counts[i]} hit(s) (${percentage.toFixed(2)}%)`; textSpan.style.minWidth = '220px'; textSpan.style.marginRight = '5px'; statP.appendChild(textSpan); const barContainer = document.createElement('div'); barContainer.style.height = '15px'; barContainer.style.width = `${MAX_BAR_WIDTH_PX}px`; barContainer.style.backgroundColor = '#e0e0e0'; barContainer.style.marginLeft = '10px'; barContainer.style.border = '1px solid #ccc'; const bar = document.createElement('div'); const barWidth = maxFreq > 0 ? (counts[i] / maxFreq) * MAX_BAR_WIDTH_PX : 0; bar.style.width = `${barWidth}px`; bar.style.height = '100%'; bar.style.backgroundColor = counts[i] > 0 ? '#4CAF50' : '#e0e0e0'; barContainer.appendChild(bar); statP.appendChild(barContainer); numFrequencyDiv.appendChild(statP); }};
    const analyzeAndRenderGroupHits = (dataToAnalyze) => { let titleSuffix = filterByDealerCheckbox.checked ? ` (Dealer: ${currentDealerId})` : ' (All Dealers)'; groupAnalysisDiv.innerHTML = `<h3>Group Hit Frequency${titleSuffix}</h3>`; let hasAnyContentRendered = false; if (dataToAnalyze.length === 0 && (!customGroups || customGroups.length === 0)) { groupAnalysisDiv.innerHTML += '<p>No results or custom groups for analysis.</p>'; return; } if (dataToAnalyze.length === 0) { groupAnalysisDiv.innerHTML += '<p>No results entered yet. Groups are displayed with 0 hits.</p>';} const renderCategory = (categoryTitle, groupsObject, isSubObject = false, isArrayOfGroups = false, applyBiasCheck = false) => { let categoryContentAdded = false; const itemsToIterate = isArrayOfGroups ? groupsObject : (isSubObject ? Object.values(groupsObject).filter(g => typeof g === 'object' && g.name && g.numbers) : Object.values(groupsObject)); if (itemsToIterate.length === 0 && !isSubObject && !isArrayOfGroups) return; if (itemsToIterate.filter(g => g && g.name && g.numbers).length === 0 && !isSubObject && !isArrayOfGroups && !isSubObject) return; if (hasAnyContentRendered && itemsToIterate.length > 0 && itemsToIterate.some(g=>g && g.name && g.numbers) ) { groupAnalysisDiv.appendChild(document.createElement('hr')); } const sectionTitleElement = document.createElement('h4'); sectionTitleElement.textContent = categoryTitle; groupAnalysisDiv.appendChild(sectionTitleElement); itemsToIterate.forEach(group => { if (group && group.numbers && group.name) { let biasIndicator = ""; let biasTypeForColor = ""; if (applyBiasCheck && group.name && EXPECTED_SECTOR_PERCENTAGES_BIAS[group.name] !== undefined && dataToAnalyze.length > 0) { const count = countHitsInGroup(group.numbers, dataToAnalyze); const percentage = (count / dataToAnalyze.length) * 100; const expectedPercent = EXPECTED_SECTOR_PERCENTAGES_BIAS[group.name]; if (percentage > (expectedPercent * HOT_THRESHOLD_MULTIPLIER) && count >= MIN_HITS_FOR_HOT) { biasText = " (Hot)"; biasTypeForColor = "Hot"; } else if (percentage < (expectedPercent * COLD_THRESHOLD_MULTIPLIER) && dataToAnalyze.length >= MIN_TOTAL_SPINS_FOR_COLD) { biasText = " (Cold)"; biasTypeForColor = "Cold"; }} appendAnalysisToDivGeneric(group.name, group.numbers, dataToAnalyze, groupAnalysisDiv, biasText, biasTypeForColor); categoryContentAdded = true; }}); if (categoryContentAdded) hasAnyContentRendered = true; }; renderCategory('Wheel Sectors', WHEEL_BASED_GROUPS, false, false, true); renderCategory(TABLE_BASED_GROUPS.dozens.name, TABLE_BASED_GROUPS.dozens, true); renderCategory(TABLE_BASED_GROUPS.columns.name, TABLE_BASED_GROUPS.columns, true); renderCategory(TABLE_BASED_GROUPS.rows.name, TABLE_BASED_GROUPS.rows, true); renderCategory(TABLE_BASED_GROUPS.diagonals.name, TABLE_BASED_GROUPS.diagonals, true); renderCategory(TABLE_BASED_GROUPS.quadrants.name, TABLE_BASED_GROUPS.quadrants, true); renderCategory(RACETRACK_BET_TYPES.finalesEnPlein.name, RACETRACK_BET_TYPES.finalesEnPlein, true); renderCategory(RACETRACK_BET_TYPES.finalesACheval.name, RACETRACK_BET_TYPES.finalesACheval, true); if (customGroups && customGroups.length > 0) { renderCategory('Custom Groups', customGroups, false, true); } if (hasAnyContentRendered) { groupAnalysisDiv.appendChild(document.createElement('hr')); } const digitSumTitle = document.createElement('h4'); digitSumTitle.textContent = 'Digit Sum Group Frequency'; groupAnalysisDiv.appendChild(digitSumTitle); if (dataToAnalyze.length === 0 ) { groupAnalysisDiv.appendChild(document.createElement('p')).textContent = 'No results for Digit Sum (shows 0 hits).'; } const digitSumCounts = {}; for (let i = 0; i <= 9; i++) { digitSumCounts[i] = 0; } dataToAnalyze.forEach(item => { const sum = getDigitSum(item.number); if (sum >= 0 && sum <= 9) { digitSumCounts[sum]++; }}); for (let i = 0; i <= 9; i++) { const groupName = `Digit Sum Group ${i}`; const count = digitSumCounts[i]; let percentage = 0; if (dataToAnalyze.length > 0) { percentage = (count / dataToAnalyze.length) * 100; } const p = document.createElement('p'); p.textContent = `${groupName}: ${count} hit(s) (${percentage.toFixed(2)}%)`; groupAnalysisDiv.appendChild(p); }};
    const analyzeAndRenderBasicTrends = (dataToAnalyze) => { let basicTrendsDiv = document.getElementById('basic-trends-analysis'); if (!basicTrendsDiv) { basicTrendsDiv = document.createElement('div'); basicTrendsDiv.id = 'basic-trends-analysis'; analysisOutputDiv.insertBefore(basicTrendsDiv, groupAnalysisDiv.nextSibling || null); } let titleSuffix = filterByDealerCheckbox.checked ? ` (Dealer: ${currentDealerId})` : ' (All Dealers)'; basicTrendsDiv.innerHTML = `<h3>Basic Trends${titleSuffix}</h3>`; if (dataToAnalyze.length === 0) { basicTrendsDiv.innerHTML += '<p>No results to analyze in current view.</p>'; return; } const appendTrendToDiv = (trendName, trendNumbers, allResultsObjects, targetDiv) => { const relevantResultsObjects = allResultsObjects.filter(item => item.number !== 0); if (relevantResultsObjects.length === 0) { targetDiv.appendChild(document.createElement('p')).textContent = `${trendName}: N/A (no non-zero results in view)`; return; } const count = countHitsInGroup(trendNumbers, relevantResultsObjects); const percentage = (count / relevantResultsObjects.length) * 100; targetDiv.appendChild(document.createElement('p')).textContent = `${trendName}: ${count} hit(s) (${percentage.toFixed(2)}%) of ${relevantResultsObjects.length} non-zero results`; }; appendTrendToDiv(BASIC_TRENDS_DEFINITIONS.redNumbers.name, BASIC_TRENDS_DEFINITIONS.redNumbers.numbers, dataToAnalyze, basicTrendsDiv); appendTrendToDiv(BASIC_TRENDS_DEFINITIONS.blackNumbers.name, BASIC_TRENDS_DEFINITIONS.blackNumbers.numbers, dataToAnalyze, basicTrendsDiv); basicTrendsDiv.appendChild(document.createElement('hr')); appendTrendToDiv(BASIC_TRENDS_DEFINITIONS.evenNumbers.name, BASIC_TRENDS_DEFINITIONS.evenNumbers.numbers, dataToAnalyze, basicTrendsDiv); appendTrendToDiv(BASIC_TRENDS_DEFINITIONS.oddNumbers.name, BASIC_TRENDS_DEFINITIONS.oddNumbers.numbers, dataToAnalyze, basicTrendsDiv); basicTrendsDiv.appendChild(document.createElement('hr')); appendTrendToDiv(BASIC_TRENDS_DEFINITIONS.lowNumbers.name, BASIC_TRENDS_DEFINITIONS.lowNumbers.numbers, dataToAnalyze, basicTrendsDiv); appendTrendToDiv(BASIC_TRENDS_DEFINITIONS.highNumbers.name, BASIC_TRENDS_DEFINITIONS.highNumbers.numbers, dataToAnalyze, basicTrendsDiv);};
    const analyzeAndRenderHotColdNumbers = (dataToAnalyze) => { currentHotNumbers = []; let hotColdDiv = document.getElementById('hot-cold-analysis'); if (!hotColdDiv) { hotColdDiv = document.createElement('div'); hotColdDiv.id = 'hot-cold-analysis'; analysisOutputDiv.insertBefore(hotColdDiv, document.getElementById('basic-trends-analysis').nextSibling || null); } const filterValue = filterSelect.value; let titleSuffix = filterByDealerCheckbox.checked ? ` (Dealer: ${currentDealerId})` : ' (All Dealers)'; let currentRangeResultObjects = dataToAnalyze; let titleRangeText = `All Available (${dataToAnalyze.length})`; if (filterValue !== 'all') { const count = parseInt(filterValue, 10); const actualCount = Math.min(count, dataToAnalyze.length); currentRangeResultObjects = dataToAnalyze.slice(-actualCount); titleRangeText = `Last ${actualCount}`; } hotColdDiv.innerHTML = `<h3>Hot & Cold Numbers (${titleRangeText})${titleSuffix}</h3>`; if (currentRangeResultObjects.length === 0) { hotColdDiv.innerHTML += '<p>No results in selected range/view.</p>'; return; } const frequencies = {}; for (let i = 0; i <= 36; i++) { frequencies[i] = { number: i, count: 0 }; } currentRangeResultObjects.forEach(item => { frequencies[item.number].count++; }); const allNumbersByFreq = Object.values(frequencies).sort((a, b) => (b.count === a.count) ? a.number - b.number : b.count - a.count); const hotNumbersData = allNumbersByFreq.filter(item => item.count > 0).slice(0, 5); hotNumbersData.forEach(item => currentHotNumbers.push(item.number)); const hotNumbersP = document.createElement('p'); hotNumbersP.innerHTML = '<strong>Hot Numbers:</strong> '; if (hotNumbersData.length > 0) { hotNumbersData.forEach((item, index) => { hotNumbersP.innerHTML += `${item.number} (${item.count}x)${index < hotNumbersData.length - 1 && index < 4 ? ', ' : ''}`; });} else { hotNumbersP.innerHTML += 'N/A'; } hotColdDiv.appendChild(hotNumbersP); const coldCandidates = Object.values(frequencies).sort((a,b) => (a.count === b.count) ? a.number - b.number : a.count - b.count); const coldNumbersOutput = coldCandidates.slice(0, 5); const coldNumbersP = document.createElement('p'); coldNumbersP.innerHTML = '<strong>Cold Numbers:</strong> '; if (coldNumbersOutput.length > 0) { coldNumbersOutput.forEach((item, index) => { coldNumbersP.innerHTML += `${item.number} (${item.count}x)${index < coldNumbersOutput.length - 1 && index < 4 ? ', ' : ''}`; });} else { coldNumbersP.innerHTML += 'N/A'; } hotColdDiv.appendChild(coldNumbersP);};
    const analyzeAndRenderRepeatPatterns = (dataToAnalyze) => { let patternWatchDiv = document.getElementById('pattern-watch-analysis'); if (!patternWatchDiv) { patternWatchDiv = document.createElement('div'); patternWatchDiv.id = 'pattern-watch-analysis'; analysisOutputDiv.insertBefore(patternWatchDiv, document.getElementById('hot-cold-analysis').nextSibling || null); } let titleSuffix = filterByDealerCheckbox.checked ? ` (Dealer: ${currentDealerId})` : ' (All Dealers)'; patternWatchDiv.innerHTML = `<h3>Pattern Watch${titleSuffix}</h3>`; const repeatsSubtitle = document.createElement('p'); repeatsSubtitle.innerHTML = '<strong>Repeats:</strong>'; patternWatchDiv.appendChild(repeatsSubtitle); if (dataToAnalyze.length < 2) { patternWatchDiv.innerHTML += '<p>Not enough results in view.</p>'; return; } let totalSameNumberRepeats = 0; const specificNumberRepeatCounts = {}; for (let i = 1; i < dataToAnalyze.length; i++) { if (dataToAnalyze[i].number === dataToAnalyze[i-1].number) { totalSameNumberRepeats++; specificNumberRepeatCounts[dataToAnalyze[i].number] = (specificNumberRepeatCounts[dataToAnalyze[i].number] || 0) + 1; }} const sameNumberP = document.createElement('p'); sameNumberP.innerHTML = `Immediate Same Number Repeats: ${totalSameNumberRepeats} total.`; if (Object.keys(specificNumberRepeatCounts).length > 0) { let details = ""; for (const num in specificNumberRepeatCounts) { details += `${num} (${specificNumberRepeatCounts[num]}x), `; } sameNumberP.innerHTML += `<br>Details: ${details.slice(0, -2)}`; } patternWatchDiv.appendChild(sameNumberP); let totalSectorRepeats = 0; const specificSectorRepeatCounts = {}; for (let i = 1; i < dataToAnalyze.length; i++) { const currentSector = getWheelSector(dataToAnalyze[i].number); const previousSector = getWheelSector(dataToAnalyze[i-1].number); if (currentSector && previousSector && currentSector === previousSector) { totalSectorRepeats++; specificSectorRepeatCounts[currentSector] = (specificSectorRepeatCounts[currentSector] || 0) + 1; }} const sectorRepeatP = document.createElement('p'); sectorRepeatP.innerHTML = `Immediate Sector Repeats: ${totalSectorRepeats} total.`; if (Object.keys(specificSectorRepeatCounts).length > 0) { let details = ""; for (const sectorName in specificSectorRepeatCounts) { details += `${sectorName} (${specificSectorRepeatCounts[sectorName]}x), `; } sectorRepeatP.innerHTML += `<br>Details: ${details.slice(0, -2)}`; } patternWatchDiv.appendChild(sectorRepeatP);};
    const analyzeAndRenderStreakFlip = (dataToAnalyze) => { let patternWatchDiv = document.getElementById('pattern-watch-analysis'); if (!patternWatchDiv) { return; } let titleSuffix = filterByDealerCheckbox.checked ? ` (Dealer: ${currentDealerId})` : ' (All Dealers)'; patternWatchDiv.appendChild(document.createElement('hr')); const titleP = document.createElement('p'); titleP.innerHTML = `<strong>Red/Black Streaks & Flips${titleSuffix}:</strong>`; patternWatchDiv.appendChild(titleP); if (dataToAnalyze.length < 1) { patternWatchDiv.appendChild(document.createElement('p')).textContent = 'Not enough results in view.'; return; } const colorsSequence = dataToAnalyze.map(item => getNumberColor(item.number)).filter(color => color === 'Red' || color === 'Black'); if (colorsSequence.length < 1) { patternWatchDiv.appendChild(document.createElement('p')).textContent = 'No Red/Black results in view.'; return; } let currentStreakColor = null, currentStreakLength = 0, longestRedStreak = 0, longestBlackStreak = 0; let tempCurrentStreak = 0, tempStreakColor = null; colorsSequence.forEach(color => { if (color === tempStreakColor) { tempCurrentStreak++; } else { tempStreakColor = color; tempCurrentStreak = 1; } if (tempStreakColor === 'Red' && tempCurrentStreak > longestRedStreak) { longestRedStreak = tempCurrentStreak; } if (tempStreakColor === 'Black' && tempCurrentStreak > longestBlackStreak) { longestBlackStreak = tempCurrentStreak; }}); if (colorsSequence.length > 0) { currentStreakColor = colorsSequence[colorsSequence.length - 1]; currentStreakLength = 0; for (let i = colorsSequence.length - 1; i >= 0; i--) { if (colorsSequence[i] === currentStreakColor) { currentStreakLength++; } else { break; }}} const streaksP = document.createElement('p'); streaksP.innerHTML = currentStreakColor ? `Current Streak: ${currentStreakColor} x ${currentStreakLength}<br>` : `Current Streak: N/A<br>`; streaksP.innerHTML += `Longest Red Streak: ${longestRedStreak}<br>Longest Black Streak: ${longestBlackStreak}`; patternWatchDiv.appendChild(streaksP); let r_r = 0, r_b = 0, b_r = 0, b_b = 0; if (colorsSequence.length >= 2) { for (let i = 1; i < colorsSequence.length; i++) { const prevColor = colorsSequence[i-1], currColor = colorsSequence[i]; if (prevColor === 'Red' && currColor === 'Red') r_r++; else if (prevColor === 'Red' && currColor === 'Black') r_b++; else if (prevColor === 'Black' && currColor === 'Red') b_r++; else if (prevColor === 'Black' && currColor === 'Black') b_b++; }} const flipsP = document.createElement('p'); flipsP.innerHTML = `Transitions: R-R: ${r_r}, R-B: ${r_b}, B-R: ${b_r}, B-B: ${b_b}`; patternWatchDiv.appendChild(flipsP);};
    const analyzeAndRenderBallLandingGaps = (dataToAnalyze) => { let gapAnalysisDiv = document.getElementById('gap-analysis'); if (!gapAnalysisDiv) { gapAnalysisDiv = document.createElement('div'); gapAnalysisDiv.id = 'gap-analysis'; analysisOutputDiv.insertBefore(gapAnalysisDiv, document.getElementById('pattern-watch-analysis').nextSibling || null); } let titleSuffix = filterByDealerCheckbox.checked ? ` (Dealer: ${currentDealerId})` : ' (All Dealers)'; gapAnalysisDiv.innerHTML = `<h3>Ball Landing Gap Frequency (Clockwise)${titleSuffix}</h3>`; if (dataToAnalyze.length < 2) { gapAnalysisDiv.innerHTML += '<p>Not enough results in view.</p>'; return; } const gapCounts = {}; for (let i = 0; i <= 36; i++) { gapCounts[i] = 0; } let totalValidGaps = 0; for (let i = 1; i < dataToAnalyze.length; i++) { const fromNumber = dataToAnalyze[i-1].number; const toNumber = dataToAnalyze[i].number; const fromIndex = EURO_WHEEL_ORDER.indexOf(fromNumber); const toIndex = EURO_WHEEL_ORDER.indexOf(toNumber); if (fromIndex === -1 || toIndex === -1) { continue; } const gap = (toIndex - fromIndex + EURO_WHEEL_ORDER.length) % EURO_WHEEL_ORDER.length; gapCounts[gap]++; totalValidGaps++; } if (totalValidGaps === 0) { gapAnalysisDiv.innerHTML += '<p>No valid gaps to analyze in view.</p>'; return; } const sortedGaps = Object.entries(gapCounts).filter(([, count]) => count > 0).sort(([, countA], [, countB]) => countB - countA); if (sortedGaps.length === 0) { gapAnalysisDiv.innerHTML += '<p>No landing gaps recorded in view.</p>'; return; } const displayLimit = 10; sortedGaps.slice(0, displayLimit).forEach(([gap, count]) => { const percentage = (count / totalValidGaps) * 100; const p = document.createElement('p'); p.textContent = `Gap of +${gap}: ${count} time(s) (${percentage.toFixed(2)}%)`; gapAnalysisDiv.appendChild(p); }); if (sortedGaps.length > displayLimit) { gapAnalysisDiv.appendChild(document.createElement('p')).textContent = `(...and ${sortedGaps.length - displayLimit} other gaps)`; }};
    const analyzeAndRenderWheelClusters = (dataToAnalyze) => { let clusterDiv = document.getElementById('wheel-clustering-analysis'); if (!clusterDiv) { clusterDiv = document.createElement('div'); clusterDiv.id = 'wheel-clustering-analysis'; analysisOutputDiv.insertBefore(clusterDiv, document.getElementById('gap-analysis').nextSibling || null); } let titleSuffix = filterByDealerCheckbox.checked ? ` (Dealer: ${currentDealerId})` : ' (All Dealers)'; clusterDiv.innerHTML = `<h3>Wheel Clustering Analysis (3 Segments)${titleSuffix}</h3>`; if (dataToAnalyze.length === 0) { clusterDiv.innerHTML += '<p>No results to analyze in view.</p>'; for (const key in WHEEL_SEGMENTS) { const segment = WHEEL_SEGMENTS[key]; clusterDiv.appendChild(document.createElement('p')).textContent = `${segment.name}: 0 hit(s) (0.00%)`; } return; } for (const key in WHEEL_SEGMENTS) { const segment = WHEEL_SEGMENTS[key]; const count = countHitsInGroup(segment.numbers, dataToAnalyze); const percentage = dataToAnalyze.length > 0 ? (count / dataToAnalyze.length) * 100 : 0; let biasIndicator = ""; if (EXPECTED_SEGMENT_PERCENTAGES[segment.name] !== undefined) { const expectedPercent = EXPECTED_SEGMENT_PERCENTAGES[segment.name]; if (percentage > (expectedPercent * HOT_THRESHOLD_MULTIPLIER) && count >= MIN_HITS_FOR_HOT) biasIndicator = " (Hot Cluster)"; else if (percentage < (expectedPercent * COLD_THRESHOLD_MULTIPLIER) && dataToAnalyze.length >= MIN_TOTAL_SPINS_FOR_COLD) biasIndicator = " (Cold Cluster)"; } const p = document.createElement('p'); p.textContent = `${segment.name}: ${count} hit(s) (${percentage.toFixed(2)}%) ${biasIndicator}`; clusterDiv.appendChild(p); }};
    const analyzeAndRenderDirectionPattern = (dataToAnalyze) => { let directionDiv = document.getElementById('direction-pattern-analysis'); if (!directionDiv) { directionDiv = document.createElement('div'); directionDiv.id = 'direction-pattern-analysis'; analysisOutputDiv.insertBefore(directionDiv, document.getElementById('wheel-clustering-analysis').nextSibling || null); } let titleSuffix = filterByDealerCheckbox.checked ? ` (Dealer: ${currentDealerId})` : ' (All Dealers)'; directionDiv.innerHTML = `<h3>Hit Direction Pattern${titleSuffix}</h3>`; if (dataToAnalyze.length < 2) { directionDiv.innerHTML += '<p>Not enough results in view.</p>'; return; } let clockwiseCount = 0, counterClockwiseCount = 0, repeatHitCount = 0; const totalTransitions = dataToAnalyze.length - 1; for (let i = 1; i < dataToAnalyze.length; i++) { const fromNumber = dataToAnalyze[i-1].number; const toNumber = dataToAnalyze[i].number; const fromIndex = EURO_WHEEL_ORDER.indexOf(fromNumber); const toIndex = EURO_WHEEL_ORDER.indexOf(toNumber); if (fromIndex === -1 || toIndex === -1) continue; const gap = (toIndex - fromIndex + EURO_WHEEL_ORDER.length) % EURO_WHEEL_ORDER.length; if (gap === 0) repeatHitCount++; else if (gap > 0 && gap <= 18) clockwiseCount++; else counterClockwiseCount++; } const createStatP = (label, count, total) => { const percentage = total > 0 ? (count / total) * 100 : 0; const p = document.createElement('p'); p.textContent = `${label}: ${count} time(s) (${percentage.toFixed(2)}%)`; return p; }; directionDiv.appendChild(createStatP('Clockwise Transitions', clockwiseCount, totalTransitions)); directionDiv.appendChild(createStatP('Counter-Clockwise Transitions', counterClockwiseCount, totalTransitions)); directionDiv.appendChild(createStatP('Same Number Repeats (0 Gap)', repeatHitCount, totalTransitions));};
    const analyzeAndRenderLeftRightSplit = (dataToAnalyze) => { let lrSplitDiv = document.getElementById('left-right-split-analysis'); if (!lrSplitDiv) { lrSplitDiv = document.createElement('div'); lrSplitDiv.id = 'left-right-split-analysis'; analysisOutputDiv.insertBefore(lrSplitDiv, document.getElementById('direction-pattern-analysis').nextSibling || null); } let titleSuffix = filterByDealerCheckbox.checked ? ` (Dealer: ${currentDealerId})` : ' (All Dealers)'; lrSplitDiv.innerHTML = `<h3>Left vs Right Half Split${titleSuffix}</h3>`; if (dataToAnalyze.length < 2) { lrSplitDiv.innerHTML += '<p>Not enough results in view.</p>'; return; } let leftHalfHits = 0, rightHalfHits = 0, relevantTransitions = 0; for (let i = 1; i < dataToAnalyze.length; i++) { const fromNumber = dataToAnalyze[i-1].number; const toNumber = dataToAnalyze[i].number; if (fromNumber === toNumber) continue; const fromIndex = EURO_WHEEL_ORDER.indexOf(fromNumber); const toIndex = EURO_WHEEL_ORDER.indexOf(toNumber); if (fromIndex === -1 || toIndex === -1) continue; relevantTransitions++; const gap = (toIndex - fromIndex + EURO_WHEEL_ORDER.length) % EURO_WHEEL_ORDER.length; if (gap > 0 && gap <= 18) rightHalfHits++; else if (gap > 18) leftHalfHits++; } if (relevantTransitions === 0) { lrSplitDiv.innerHTML += '<p>No valid transitions in view.</p>'; return; } const createStatP = (label, count, total) => { const percentage = total > 0 ? (count / total) * 100 : 0; const p = document.createElement('p'); p.textContent = `${label}: ${count} time(s) (${percentage.toFixed(2)}%)`; return p; }; lrSplitDiv.appendChild(createStatP('Hits on Right Half (CW)', rightHalfHits, relevantTransitions)); lrSplitDiv.appendChild(createStatP('Hits on Left Half (CCW)', leftHalfHits, relevantTransitions));};
    const analyzeAndRenderSpiralPatterns = (dataToAnalyze) => { let patternWatchDiv = document.getElementById('pattern-watch-analysis'); if (!patternWatchDiv) { patternWatchDiv = document.createElement('div'); patternWatchDiv.id = 'pattern-watch-analysis'; const hotColdDiv = document.getElementById('hot-cold-analysis'); if (hotColdDiv && hotColdDiv.parentNode === analysisOutputDiv) { analysisOutputDiv.insertBefore(patternWatchDiv, hotColdDiv.nextSibling); } else { analysisOutputDiv.appendChild(patternWatchDiv); } patternWatchDiv.innerHTML = '<h3>Pattern Watch</h3>'; } if (patternWatchDiv.querySelector('p')) { patternWatchDiv.appendChild(document.createElement('hr')); } const titleP = document.createElement('p'); titleP.innerHTML = "<strong>Spiral Patterns (Min 3 Gaps / 4 Numbers):</strong>"; patternWatchDiv.appendChild(titleP); let titleSuffix = filterByDealerCheckbox.checked ? ` (Dealer: ${currentDealerId})` : ' (All Results)'; if (dataToAnalyze.length < 4) { const p = document.createElement('p'); p.textContent = `Not enough results in current view to detect spiral patterns${titleSuffix}.`; patternWatchDiv.appendChild(p); return; } const calculatedGaps = []; for (let i = 1; i < dataToAnalyze.length; i++) { const fromNumber = dataToAnalyze[i-1].number; const toNumber = dataToAnalyze[i].number; const fromIndex = EURO_WHEEL_ORDER.indexOf(fromNumber); const toIndex = EURO_WHEEL_ORDER.indexOf(toNumber); if (fromIndex === -1 || toIndex === -1) continue; const gap = (toIndex - fromIndex + EURO_WHEEL_ORDER.length) % EURO_WHEEL_ORDER.length; calculatedGaps.push({ endingNumber: toNumber, actualGap: gap, prevNumber: fromNumber }); } if (calculatedGaps.length < 3) { const p = document.createElement('p'); p.textContent = `Not enough transitions in current view to detect spiral patterns${titleSuffix}.`; patternWatchDiv.appendChild(p); return; } let spiralsFound = []; for (let i = 0; i <= calculatedGaps.length - 3; i++) { const gap1Obj = calculatedGaps[i], gap2Obj = calculatedGaps[i+1], gap3Obj = calculatedGaps[i+2]; if (gap1Obj.actualGap === 0 || gap2Obj.actualGap === 0 || gap3Obj.actualGap === 0) continue; const n0 = gap1Obj.prevNumber, n1 = gap1Obj.endingNumber, n2 = gap2Obj.endingNumber, n3 = gap3Obj.endingNumber; const g1 = gap1Obj.actualGap, g2 = gap2Obj.actualGap, g3 = gap3Obj.actualGap; let spiralType = null; if (g1 < g2 && g2 < g3) spiralType = "Outward CW"; else if (g1 > g2 && g2 > g3) spiralType = "Inward CW"; if (spiralType) spiralsFound.push(`${spiralType} Spiral: [${n0},${n1},${n2},${n3}] (Gaps: +${g1},+${g2},+${g3})${titleSuffix}`); } if (spiralsFound.length > 0) { const maxSpiralsToDisplay = 3; const spiralsToDisplay = spiralsFound.slice(-maxSpiralsToDisplay); spiralsToDisplay.forEach(spiralText => { const p = document.createElement('p'); p.textContent = spiralText; patternWatchDiv.appendChild(p); }); } else { const p = document.createElement('p'); p.textContent = `No distinct spiral patterns detected in current view${titleSuffix}.`; patternWatchDiv.appendChild(p); }};
    const checkAndDisplayGroupPatternAlerts = (dataToAnalyze) => { /* ... (as refactored) ... */ };
    const renderFullHistory = () => { /* ... (as refactored) ... */ };

    // --- Main renderResults Orchestrator ---
    const renderResults = () => {
        renderResultsListDisplay();
        let dataForAnalysis = results;
        if (filterByDealerCheckbox.checked) { dataForAnalysis = results.filter(r => r.dealerId === currentDealerId); }
        updateActiveDealerFilterDisplay();
        updateSessionTrackerDisplay();
        analyzeAndRenderHotColdNumbers(dataForAnalysis);
        checkAndDisplayGroupPatternAlerts(dataForAnalysis);
        renderFrequencyAnalysis(dataForAnalysis);
        analyzeAndRenderGroupHits(dataForAnalysis);
        analyzeAndRenderBasicTrends(dataForAnalysis);
        analyzeAndRenderRepeatPatterns(dataForAnalysis);
        analyzeAndRenderStreakFlip(dataForAnalysis);
        analyzeAndRenderBallLandingGaps(dataForAnalysis);
        analyzeAndRenderWheelClusters(dataForAnalysis);
        analyzeAndRenderDirectionPattern(dataToAnalyze);
        analyzeAndRenderLeftRightSplit(dataForAnalysis);
        analyzeAndRenderSpiralPatterns(dataForAnalysis);
        renderFullHistory();
    };

    // --- Initial Page Load Sequence & Event Listeners ---
    loadSessionStartTime(); loadCurrentDealerId(); loadResults(); loadCustomGroups(); renderResults();
    if (sessionIntervalId) clearInterval(sessionIntervalId);
    sessionIntervalId = setInterval(updateLiveDuration, 1000);
    filterSelect.addEventListener('change', renderResultsListDisplay);
});
